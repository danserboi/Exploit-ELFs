Tratam intai binarul nice.

Intre label-urile print_flag si main avem 13 functii:

80485b1: Prima functie afiseaza flag-ul, pe cazul cand eax e diferit de 
0xffffffff (se ajunge aici folosindu-ne de functia de la adresa 804867a care 
poate suprascrie pe stiva anumite valori, dupa care in eax se stocheaza 
valoarea de la ebp + 8 = adresa 80485b1). Se afiseaza flag-ul dupa care se 
paraseste functia (fara exit). Pe celelalt caz (cel cu eax = 0xffffffff) se 
apeleaza exit (fara sa se mai afiseze ceva inainte).

80485e8: In a doua functie se afiseaza "All done! Bye-bye" si se apeleaza exit.

Dupa, avem 11 functii care citesc de la stdin si scriu in memorie pe stiva. 
Aceste functii sunt apelate in main in aceasta ordine.

80485fe: aloca pe stiva 0x96 = 150 bytes. Citeste si scrie pe stiva 0x6a = 106 
bytes.

8048615: aloca pe stiva 0x1ae = 430 bytes. Citeste si scrie pe stiva 0x65 = 101 
bytes.

804862c: aloca pe stiva 0x107 = 263 bytes. Citeste si scrie pe stiva 0xca = 202 
bytes.

8048646: aloca pe stiva 0x1eb = 491 bytes. Citeste si scrie pe stiva 0x99 = 153 
bytes.

8048660: aloca pe stiva 0x14a = 330 bytes. Citeste si scrie pe stiva 0x8b = 139 
bytes.

Urmatoarea functie este cea vulnerabila.
804867a: aloca pe stiva 0x198 = 408 bytes. Citeste si scrie pe stiva 0x26b = 
619 bytes > 408 bytes. Prin urmare, daca se citeste un string cu mai mult de 
408 bytes ca lungime, se suprascriu valorile anterioare de pe stiva (se poate 
produce buffer overflow).
In plus, e singura functie din cele 11 care pe langa faptul ca citeste de la 
stdin, mai apeleaza o functie a carei adresa se gaseste in eax (valoarea de la 
ebp + 8), dupa care se incheie programul.
Pentru a exploata vulnerabilitea functiei ii dam ca input un sir de lungime de 
(106 + 101 + 202 + 153 + 139) + 408 + 16 (vrem sa avem valoarea 80485b1 la ebp 
+ 8) = 1125 bytes, care are pe ultimii 4 bytes adresa primei functii: 80485b1. 
Astfel, se va scrie la ebp + 8 adresa primei functii: 80485b1, se va muta in 
eax aceasta valoare si se va intra in acea functie care va afisa flag-ul: 
NICE_FLAG{493c906f816761279cb7f87bb4029b17}.

Tratam binarul naughty.

Intre label-urile print_flag si main avem urmatoarele functii:

80485b1 si 80485e8: Primele 2 functii fac acelasi lucru ca cele din binarul 
nice.

Dupa, avem 9 functii care citesc de la stdin si scriu in memorie pe stiva. La 
sfarsit se verifica o anumita valoare. Daca aceasta se regaseste se face saltul 
la o alta functie.
Aceste functii sunt apelate in main in aceasta ordine.

80485fe: aloca pe stiva 0x144 = 324 bytes. Citeste si scrie pe stiva 0x6c = 108 
bytes. Verifica daca la ebp - 250 se gaseste 0xb6cfd10e. Daca da, face salt 
pentru a iesi din functie. Altfel, se apeleaza exit.

8048628: aloca pe stiva 0x102 = 258 bytes. Citeste si scrie pe stiva 0x8d = 141 
bytes. Verifica daca la ebp - 203 se gaseste 0x11886cc0. Daca da, face salt 
pentru a iesi din functie. Altfel, se apeleaza exit.

8048655: aloca pe stiva 0xda = 218 bytes. Citeste si scrie pe stiva 0x98 = 152 
bytes. Verifica daca la ebp - 100 se gaseste 0x1ec336bf. Daca da, face salt 
pentru a iesi din functie. Altfel, se apeleaza exit.

804867f: aloca pe stiva 0x9b = 155 bytes. Citeste si scrie pe stiva 0x85 = 133 
bytes. Verifica daca la ebp - 81 se gaseste 0xd9231287. Daca da, face salt 
pentru a iesi din functie. Altfel, se apeleaza exit.

Urmatoarea functie este cea vulnerabila.
80486a9: aloca pe stiva 0x10b = 267 bytes. Citeste si scrie pe stiva 0x1b3 = 
435 bytes > 267 bytes. Prin urmare, daca se citeste un string cu mai mult de 
408 bytes ca lungime, se suprascriu valorile anterioare de pe stiva (se poate 
produce buffer overflow).
Apoi, verifica daca la ebp - 56 se gaseste 0x2e1a2e24. Daca da, se face salt si 
se pune in eax valoarea de la ebp + 12 si se apeleaza ceea ce se gaseste in 
eax, dupa care se apeleaza exit. Altfel, se apeleaza exit.

Pentru a exploata vulnerabilitea functiei ii dam ca input un sir de lungime de 
(108 + 141 + 152 + 133) + 267 + 16(vrem sa avem valoarea 80485b1 la ebp + 12) = 
817 bytes care trebuie sa respecte urmatoarele:
- la byte-ul imediat dupa byte-ul 324 - 250 = 74 se gaseste 0xb6cfd10e
- la byte-ul imediat dupa byte-ul 108 + (258 - 203) = 108 + 55 = 163 se gaseste 
0x11886cc0
- la byte-ul imediat dupa byte-ul 108 + 141 + (218 - 100) = 108 + 141 + 118 = 
367 se gaseste 0x1ec336bf
- la byte-ul imediat dupa byte-ul 108 + 141 + 152 + (155 - 81) = 108 + 141 + 
152 + 74 = 475 se gaseste 0xd9231287
- la byte-ul imediat dupa byte-ul 108 + 141 + 152 + 133 + (267 - 56) = 745 se 
gaseste 0x2e1a2e24.
- pe ultimii 4 bytes adresa primei functii: 80485b1.
Astfel, se va scrie la ebp + 12 adresa primei functii: 80485b1, se va muta in 
eax aceasta valoare si se va intra in acea functie care va afisa flag-ul : 
NAUGHTY_FLAG{1e79b0e8ba9947c4f4ed98fa58a80ce3}.
